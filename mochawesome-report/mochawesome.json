{
  "stats": {
    "suites": 8,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-20T21:56:56.526Z",
    "end": "2023-09-20T21:57:28.995Z",
    "duration": 32469,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d06151e3-cdfb-479b-9284-aaa00c23e210",
      "title": "",
      "fullFile": "cypress\\e2e\\api\\validations.cy.js",
      "file": "cypress\\e2e\\api\\validations.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "adf03e17-f3da-4f02-8796-78dc365b48b3",
          "title": "Validações",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0c28fea2-882a-4c2e-8d4c-c5bfd4e5c149",
              "title": "Validar o formato da request (json válido) para a API:",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "valida formato da request",
                  "fullTitle": "Validações Validar o formato da request (json válido) para a API: valida formato da request",
                  "timedOut": null,
                  "duration": 9879,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'films/?format=json'\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(200);\n  expect(body.count).eq(6);\n  for (let i = 0; i < fixtureTitles.length; i++) {\n    expect(body.results[i].title).to.eq(fixtureTitles[i]);\n  }\n  cy.testeContrato(_validApi_Url.testeContratoFilms, body);\n});",
                  "err": {},
                  "uuid": "27e89b34-1b84-4785-abea-112828ad3b4e",
                  "parentUUID": "0c28fea2-882a-4c2e-8d4c-c5bfd4e5c149",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27e89b34-1b84-4785-abea-112828ad3b4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9879,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28db2037-de7f-480f-a693-bf5e5d1a284a",
          "title": "Validar retornos para URLs inválidas",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Retornos para URLs inválidas",
              "fullTitle": "Validar retornos para URLs inválidas Retornos para URLs inválidas",
              "timedOut": null,
              "duration": 890,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'people/?format=jsonx',\n  failOnStatusCode: false\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(404);\n  cy.testeContrato(_invalidApi_Url.requestInvalido, body);\n});",
              "err": {},
              "uuid": "dbaf1010-00a9-4ad3-ba64-133182a47a36",
              "parentUUID": "28db2037-de7f-480f-a693-bf5e5d1a284a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbaf1010-00a9-4ad3-ba64-133182a47a36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 890,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23700a55-9a8f-4e77-af31-7abc9446d84b",
          "title": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar;",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Valida se filme 10 é válido",
              "fullTitle": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar; Valida se filme 10 é válido",
              "timedOut": null,
              "duration": 693,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'films/10',\n  failOnStatusCode: false\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(404);\n  cy.testeContrato(_invalidApi_Url.requestInvalido, body);\n});",
              "err": {},
              "uuid": "29dcf953-bef4-49f2-b1f0-399078baac3e",
              "parentUUID": "23700a55-9a8f-4e77-af31-7abc9446d84b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "603c0c0b-556a-447a-a1c8-d3320bfa3cf5",
              "title": "Validar o nome correto de um determinado episódio de filme",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Nome correto de um episódio de filme",
                  "fullTitle": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar; Validar o nome correto de um determinado episódio de filme Nome correto de um episódio de filme",
                  "timedOut": null,
                  "duration": 6620,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'films/'\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(200);\n  expect(body.results[3].title).to.eq('The Phantom Menace');\n});",
                  "err": {},
                  "uuid": "f33fcd7d-ccdb-49c1-a1af-9c4b653cd7b9",
                  "parentUUID": "603c0c0b-556a-447a-a1c8-d3320bfa3cf5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f33fcd7d-ccdb-49c1-a1af-9c4b653cd7b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6620,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ddd230aa-a062-4336-b63f-c3391f4ea73a",
              "title": "Validar o ID do episódio e se o tipo do dado está correto",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "ID do episódio e o tipo do dado está correto",
                  "fullTitle": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar; Validar o ID do episódio e se o tipo do dado está correto ID do episódio e o tipo do dado está correto",
                  "timedOut": null,
                  "duration": 6928,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'films/'\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.headers['content-type']).to.include('application/json');\n}).then(jsonResponse => {\n  expect(Number.isInteger(jsonResponse)).to.be.false;\n  expect(jsonResponse.body.results[3].title).to.eq('The Phantom Menace');\n});",
                  "err": {},
                  "uuid": "763c9e83-e59c-40f2-9d0d-d86e2e3250f6",
                  "parentUUID": "ddd230aa-a062-4336-b63f-c3391f4ea73a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "763c9e83-e59c-40f2-9d0d-d86e2e3250f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6928,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ccfa04f6-e0a9-41a7-af78-905ae190c5d5",
              "title": "Validar o formato de data válida e validar se a data não é padrão Brasil",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "formato de data",
                  "fullTitle": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar; Validar o formato de data válida e validar se a data não é padrão Brasil formato de data",
                  "timedOut": null,
                  "duration": 5824,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'films/'\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.headers['content-type']).to.include('application/json');\n}).its('body.results[1]').then(jsonResponse => {\n  expect(jsonResponse).to.have.property('release_date');\n  const dataValue = jsonResponse.release_date;\n  const formatoValido = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (formatoValido.test(dataValue)) {\n    cy.log(`A data \"${dataValue}\" está no formato válido \"YYYY-MM-DD\".`);\n  } else {\n    cy.log(`A data \"${dataValue}\" não está no formato válido \"YYYY-MM-DD\".`);\n  }\n});",
                  "err": {},
                  "uuid": "b99e3955-dd1e-41c5-b4e4-277f98bd2bae",
                  "parentUUID": "ccfa04f6-e0a9-41a7-af78-905ae190c5d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b99e3955-dd1e-41c5-b4e4-277f98bd2bae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5824,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14cdbbef-7a89-43c2-987f-81d07ffcf92f",
              "title": "Validar o peso, altura do “people” C-3POe validar um filme que tenha participado",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Validar Peso e altura C-3P0",
                  "fullTitle": "Validar se o filme 10 é válido e qual o tipo de retorno ao consultar; Validar o peso, altura do “people” C-3POe validar um filme que tenha participado Validar Peso e altura C-3P0",
                  "timedOut": null,
                  "duration": 1079,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: 'people/2'\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(200);\n  expect(body.mass).to.eq('75');\n  expect(body.height).to.eq('167');\n  expect(body.films[4]).to.contains('films/5');\n});",
                  "err": {},
                  "uuid": "68e54a54-cda9-4f24-bf7f-c9f8ee7a0a19",
                  "parentUUID": "14cdbbef-7a89-43c2-987f-81d07ffcf92f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68e54a54-cda9-4f24-bf7f-c9f8ee7a0a19"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1079,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "29dcf953-bef4-49f2-b1f0-399078baac3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 693,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}